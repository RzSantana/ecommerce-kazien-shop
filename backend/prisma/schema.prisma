generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum DropStatus {
    ACTIVE
    COMING_SOON
    ENDED
}

model Product {
    id           String  @id @default(cuid())
    name         String
    categoryId   String
    price        Decimal @db.Decimal(10, 2)
    cover        String  @db.Text
    currencyType String  @default("€") @db.VarChar(5)
    description  String? @db.Text
    stock        Int     @default(0)
    isNew        Boolean @default(false)
    isTopSale    Boolean @default(false)
    isLimited    Boolean @default(false)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    dropProducts DropProduct[]
    category     Category      @relation(fields: [categoryId], references: [id])
    cartItems    CartItem[]

    // Índices
    @@index([categoryId])
    @@index([isNew])
    @@index([isTopSale])
    @@index([stock])
    @@fulltext([name, description])
    @@map("products")
}

model Drop {
    id          String     @id @default(cuid())
    name        String     @unique @db.VarChar(255)
    description String     @db.Text
    status      DropStatus @default(ACTIVE)
    releaseDate DateTime
    endDate     DateTime?
    bannerImage String     @db.Text

    // Colores del tema
    primaryColor   String @db.VarChar(7)
    secondaryColor String @db.VarChar(7)
    accentColor    String @db.VarChar(7)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    products DropProduct[]

    @@index([status])
    @@index([releaseDate])
    @@map("drops")
}

model DropProduct {
    id        String @id @default(cuid())
    dropId    String
    productId String

    // Campos específicos del producto en el drop
    dropPrice Decimal? @db.Decimal(10, 2)
    isLimited Boolean  @default(false)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    drop    Drop    @relation(fields: [dropId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([dropId, productId])
    @@index([dropId])
    @@index([productId])
    @@map("drop_products")
}

model Category {
    id          String  @id @default(cuid())
    name        String  @unique @db.VarChar(100)
    description String? @db.Text
    isActive    Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones - Los productos ahora referencian categories
    products Product[]

    @@map("categories")
}

model User {
    id       String @id @default(cuid())
    email    String @unique
    password String
    name     String
    role     String @default("user") // "user" | "admin"

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    @@map("sessions")
}

model Cart {
    id     String @id @default(cuid())
    userId String @unique

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    items CartItem[]

    @@map("carts")
}

model CartItem {
    id        String @id @default(cuid())
    cartId    String
    productId String
    quantity  Int    @default(1)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relaciones
    cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([cartId, productId])
    @@map("cart_items")
}
